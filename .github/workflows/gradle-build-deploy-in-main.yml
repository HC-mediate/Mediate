# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Mediate Java CI with Gradle

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Action Sequence
      - name: Start Action
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CONFIG_REPOSITORY_TOKEN }}
          submodules: recursive

      # Setup JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      # Submodule Update
      - name: Git Sumbmodule Update
        run: git submodule update --remote --recursive

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/
      #appspec.yml copy
      - name: Copy appspec
        run: cp ./appspec.yml ./deploy/

      #script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./mediate-springboot2-webservice.zip ./deploy

      #S3 bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./mediate-springboot2-webservice.zip s3://mediate-springboot-build/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name mediate-springboot2-webservice \
          --deployment-group-name mediate-springboot2-webservice-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=mediate-springboot-build,bundleType=zip,key=mediate-springboot2-webservice.zip \
          --region ap-northeast-2

